import os
import numpy as np

from utils.tools import *
from utils.fitness_util import *
from probability_model import ProbabilityModel


def KP_BGA(problem, dims, premSTOP, pop=100, gen=1000, addr="problems/knapsack"):
    """[bestSol, fitness_hist] = BGA(problem,dims,th_best): simple binary GA with
        uniform crossover and bit-flip mutation.
        INPUT:
         problem: problem generated by GenKnapsack
         dims: problem dimensionality
         premSTOP: used for early stop if no improvement is made for 50 consecutive generations

        OUTPUT:
         bestSol: best solution
         fitness: history of best fitness for each ge  neration"""
    bestSol = None
    all_models = Tools.load_from_file(os.path.join(addr, 'all_models'))

    fitness_hist = np.zeros(gen)
    population = np.round(np.random.rand(pop, dims))
    fitness = knapsack_fitness_eval(population, problem, dims, pop)
    fitness_hist[0] = bestfitness = max(fitness)
    print('Generation 0 best fitness = ', str(fitness_hist[0]))

    counter = 0
    for i in range(1, gen):
        parent1 = population[np.random.permutation(pop), :]
        parent2 = population[np.random.permutation(pop), :]
        tmp = np.random.rand(pop, dims)
        offspring = np.zeros((pop, dims))
        index = tmp >= 0.5
        offspring[index] = parent1[index]
        index = tmp < 0.5
        offspring[index] = parent2[index]
        tmp = np.random.rand(pop, dims)
        index = tmp < (1 / dims)
        offspring[index] = np.abs(1 - offspring[index])
        cfitness = knapsack_fitness_eval(population, problem, dims, pop)
        interpop = np.append(population, offspring, 0)
        interfitness = np.append(fitness, cfitness)
        index = np.argsort((-interfitness))
        interfitness = interfitness[index]
        fitness = interfitness[:pop]
        interpop = interpop[index, :]
        population = interpop[:pop, :]
        fitness_hist[i] = fitness[0]
        print('Generation ', str(i), ' best fitness = ', str(fitness_hist[i]))

        if fitness[0] > bestfitness:
            bestfitness = fitness[0]
            counter = 0
        else:
            counter += 1
        if counter == 50 and premSTOP:
            fitness_hist[i:] = fitness_hist[i]
            break
    bestSol = population[0, :]
    model = ProbabilityModel()
    model.buildmodel(population)
    all_models.append(model)
    Tools.save_to_file(os.path.join(addr, 'all_models'), all_models)

    return bestSol, fitness_hist


def main():
    knapsack_problem_path = 'problems/knapsack'

    KP_sc_ak = Tools.load_from_file(os.path.join(knapsack_problem_path, 'KP_sc_ak'))
    KP_uc_ak = Tools.load_from_file(os.path.join(knapsack_problem_path, 'KP_uc_ak'))
    KP_wc_rk = Tools.load_from_file(os.path.join(knapsack_problem_path, 'KP_wc_rk'))
    KP_sc_rk = Tools.load_from_file(os.path.join(knapsack_problem_path, 'KP_sc_rk'))
    KP_uc_rk = Tools.load_from_file(os.path.join(knapsack_problem_path, 'KP_uc_rk'))

    all_models = []

    Tools.save_to_file(os.path.join(knapsack_problem_path, 'all_models'), all_models)

    # build source probabilistic models
    KP_BGA(KP_uc_rk, 1000, True, addr="problems/knapsack")
    KP_BGA(KP_sc_rk, 1000, True, addr="problems/knapsack")
    KP_BGA(KP_wc_rk, 1000, True, addr="problems/knapsack")
    KP_BGA(KP_sc_ak, 1000, True, addr="problems/knapsack")


if __name__ == "__main__":
    main()
